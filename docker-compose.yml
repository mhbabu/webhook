version: '3.5'

services:
  backend:
    container_name: webhook-backend
    build:
      context: .
      dockerfile: DockerFile
    restart: unless-stopped
    tty: true
    working_dir: /var/www/html
    ports:
      - "9000:9000"
    expose:
      - "9000"
    depends_on:
      websocket:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - .:/var/www/html
    networks:
      - automatrix

  websocket:
    container_name: webhook-websocket
    build:
      context: .
      dockerfile: DockerFile
    restart: unless-stopped
    command: ["php", "artisan", "websockets:serve"]
    user: root
    volumes:
      - .:/var/www/html
    working_dir: /var/www/html
    ports:
      - "6001:6001"
    expose:
      - "6001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "docker/health-checker/websocket-health-checker.sh"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - automatrix

  queue:
    container_name: webhook-queue
    build:
      context: .
      dockerfile: DockerFile
    command: php artisan queue:work --queue=default,trip,application,bulk_applications
    volumes:
      - .:/var/www/html
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - automatrix

  webserver:
    container_name: webhook-webserver
    image: nginx:alpine
    restart: unless-stopped
    tty: true
    ports:
      - "8080:80"
    depends_on:
      websocket:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./public:/var/www/html/public
    networks:
      - automatrix

  db:
    container_name: webhook-db
    image: mysql:8
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    volumes:
      - ./docker/mysql/data:/var/lib/mysql
      - ./mysql/conf.d/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: webhook
      MYSQL_USER: webhook
      MYSQL_PASSWORD: webhook
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -u root -proot" ]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    networks:
      - automatrix

  redis:
    container_name: webhook-redis
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    networks:
      - automatrix

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    networks:
      - automatrix

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:9092"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    networks:
      - automatrix

networks:
  automatrix:
    name: automatrix
    driver: bridge
